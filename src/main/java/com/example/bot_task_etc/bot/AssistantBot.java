package com.example.bot_task_etc.bot;

import com.example.bot_task_etc.config.NoteCommandHandle;
import com.example.bot_task_etc.config.ReminderCommandHandle;
import com.example.bot_task_etc.state.NoteStateTracker;
import com.example.bot_task_etc.state.ReminderStateTracker;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.List;

@Component
@RequiredArgsConstructor
public class AssistantBot extends TelegramLongPollingBot {

    private final ReminderCommandHandle reminderCommandHandle;
    private final ReminderStateTracker stateTracker;
    private final NoteCommandHandle noteCommandHandle;
    private final NoteStateTracker noteStateTracker;

    @Value("${telegrambots.bots.username}")
    private String botUsername;

    @Value("${telegrambots.bots.token}")
    private String botToken;

    @PostConstruct
    public void start() throws Exception {
        TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
        api.registerBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()){
            return;
        }

        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();

        if (noteStateTracker.getState(chatId) != NoteStateTracker.State.NONE) {
            noteCommandHandle.handleTextInput(chatId, text, this);
            return;
        }

        if (stateTracker.getState(chatId) != ReminderStateTracker.State.NONE) {
            reminderCommandHandle.handleInput(chatId, text, this);
            return;
        }

        switch (text) {
            case "/start"-> sendMenu(chatId);
            case "üìù –ó–∞–º–µ—Ç–∫–∏"-> sendNoteMenu(chatId);
            case "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"-> sendReminderMenu(chatId);

            case "‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"-> noteCommandHandle.handleNewNote(chatId, this);
            case "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"-> noteCommandHandle.handleListNotes(chatId, this);
            case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"-> noteCommandHandle.handleEditNote(chatId, this);
            case "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"-> noteCommandHandle.handleDeleteNote(chatId, this);

            case "‚ûï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"-> reminderCommandHandle.handleNewReminder(chatId, this);
            case "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"-> reminderCommandHandle.handleListReminders(chatId, this);
            case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"-> reminderCommandHandle.handleEditReminders(chatId, this);
            case "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"-> reminderCommandHandle.handleDeleteReminders(chatId, this);
            case "üîô –ù–∞–∑–∞–¥" -> {
                SendMessage msg = new SendMessage();
                msg.setChatId(chatId.toString());
                msg.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
                msg.setReplyMarkup(sendMenu(chatId));
                try {
                    execute(msg);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }
            default -> {
                sendText(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.");
            }
        }

    }

    private void sendText(Long chatId, String text) {
        SendMessage msg = new SendMessage(chatId.toString(), text);
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboard sendMenu(Long chatId) {
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏"));
        row.add(new KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"));
        return sendKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", List.of(row));

    }

    private void sendNoteMenu(Long chatId) {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"));
        row1.add(new KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"));
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"));
        row2.add(new KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"));
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));
        sendKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:", List.of(row1, row2, row3));
    }

    private void sendReminderMenu(Long chatId) {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("‚ûï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"));
        row1.add(new KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"));
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"));
        row2.add(new KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"));
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));
        sendKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", List.of(row1, row2, row3));
    }

    private ReplyKeyboard sendKeyboard(Long chatId, String text, List<KeyboardRow> rows) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);

        SendMessage msg = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(keyboard)
                .build();

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
        return msg.getReplyMarkup();
    }
}
