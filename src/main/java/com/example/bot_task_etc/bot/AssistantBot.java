package com.example.bot_task_etc.bot;

import com.example.bot_task_etc.controller.BotController;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class AssistantBot extends TelegramLongPollingBot {

    private final BotController botController;

    @Value("${telegrambots.bots.username}")
    private String botUsername;

    @Value("${telegrambots.bots.token}")
    private String botToken;

    @PostConstruct
    public void start() throws Exception {
        TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
        api.registerBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()){
            return;
        }

        Message message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText().trim();
        Long userId = message.getFrom().getId();

        String command = text.toLowerCase();

        if (botController.isAwaitingNote(userId)) {
            botController.saveNote(userId, text);
            botController.setAwaitingNote(userId, false);
            send(chatId, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
            return;
        }

        if (botController.isEditingNote(userId)) {
            botController.updateNote(userId, text);
            send(chatId, "‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
            return;
        }

        if (command.startsWith("—É–¥–∞–ª–∏—Ç—å ")) {
            try {
                int index = Integer.parseInt(command.substring(8).trim());
                botController.deleteNoteByIndex(userId, index);
                send(chatId, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.");
            } catch (Exception e) {
                send(chatId, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π `—É–¥–∞–ª–∏—Ç—å 2`.");
            }
            return;
        }

        if (command.startsWith("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ")) {
            try {
                int index = Integer.parseInt(command.substring(14).trim());
                botController.prepareNoteEdit(userId, index);
                send(chatId, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #" + index + ":");
            } catch (Exception e) {
                send(chatId, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π `—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å 2`.");
            }
            return;
        }

        switch (command) {
            case "/start" -> {
                botController.registerUser(message.getFrom());
                send(chatId, "üëã –ü—Ä–∏–≤–µ—Ç, " + message.getFrom().getFirstName() + "!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            }
            case "/note", "üìù –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞" -> {
                botController.setAwaitingNote(userId, true);
                send(chatId, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:");
            }
            case "/listnote", "üìã —Å–ø–∏—Å–æ–∫" -> {
                send(chatId, botController.listNotes(userId));
            }
            case "/deletenote", "‚ùå —É–¥–∞–ª–∏—Ç—å" -> {
                send(chatId, "üóë –ù–∞–ø–∏—à–∏ `—É–¥–∞–ª–∏—Ç—å N`, –≥–¥–µ N ‚Äî –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.");
            }
            default -> {
                send(chatId, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `—É–¥–∞–ª–∏—Ç—å N`, `—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å N`.");
            }
        }
    }

    private void send(Long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(buildMainKeyboard())
                .build();
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup buildMainKeyboard() {
        KeyboardButton newNoteButton = new KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞");
        KeyboardButton listButton = new KeyboardButton("üìã –°–ø–∏—Å–æ–∫");
        KeyboardButton deleteButton = new KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å");

        KeyboardRow row1 = new KeyboardRow();
        row1.add(newNoteButton);
        row1.add(listButton);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(deleteButton);

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setKeyboard(keyboard);
        markup.setResizeKeyboard(true); // –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–¥ —ç–∫—Ä–∞–Ω
        markup.setOneTimeKeyboard(false);

        return markup;
    }
}
