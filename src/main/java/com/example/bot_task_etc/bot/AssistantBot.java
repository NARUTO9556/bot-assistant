package com.example.bot_task_etc.bot;

import com.example.bot_task_etc.controller.BotController;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.List;

@Component
@RequiredArgsConstructor
public class AssistantBot extends TelegramLongPollingBot {

    private final BotController botController;

    @Value("${telegrambots.bots.username}")
    private String botUsername;

    @Value("${telegrambots.bots.token}")
    private String botToken;

    @PostConstruct
    public void start() throws Exception {
        TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
        api.registerBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        var message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText();

        String response = "";
        switch (text) {
            case "/start" -> {
                botController.registerUser(message.getFrom());
                SendMessage msg = SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("–ü—Ä–∏–≤–µ—Ç, " + message.getFrom().getFirstName() + "! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                        .replyMarkup(getMainMenuKeyboard())
                        .build();
                try {
                    execute(msg);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }

            case "üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞" -> response = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é.";
            case "üìã –°–ø–∏—Å–æ–∫" -> {
                var notes = botController.getUserNotes(chatId);
                if (notes.isEmpty()) {
                    response = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.";
                } else {
                    StringBuilder sb = new StringBuilder("–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n");
                    notes.forEach(note ->
                            sb.append(note.getId()).append(": ").append(note.getText()).append("\n"));
                    response = sb.toString();
                }
            }

            case "‚ùå –£–¥–∞–ª–∏—Ç—å" -> response = "–ù–∞–ø–∏—à–∏ ID –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.";
            default -> {
                if (text.startsWith("/note ")) {
                    botController.saveNote(chatId, text.substring(6));
                    response = "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.";
                } else if (text.startsWith("/deletenote ")) {
                    try {
                        Long id = Long.parseLong(text.substring(12));
                        botController.deleteNote(id);
                        response = "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.";
                    } catch (Exception e) {
                        response = "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.";
                    }
                } else {
                    response = """
                            –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.  
                            –ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
                            """;
                }
            }
        }

        sendMessage(chatId, response, getMainMenuKeyboard());
    }

    private void sendMessage(Long chatId, String text, ReplyKeyboardMarkup keyboard) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .replyMarkup(keyboard)
                    .build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup getMainMenuKeyboard() {
        KeyboardButton newNote = new KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞");
        KeyboardButton list = new KeyboardButton("üìã –°–ø–∏—Å–æ–∫");
        KeyboardButton delete = new KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å");

        List<KeyboardButton> row1 = List.of(newNote, list);
        List<KeyboardButton> row2 = List.of(delete);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setKeyboard(List.of());
        keyboard.setResizeKeyboard(true);

        return keyboard;
    }
}
